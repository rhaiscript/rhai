#![cfg(not(feature = "unchecked"))]
use rhai::{Dynamic, Engine, EvalAltResult, ParseErrorType, INT};

#[test]
#[cfg(not(feature = "no_function"))]
fn test_stack_overflow_fn_calls() {
    let engine = Engine::new();

    assert_eq!(
        engine
            .eval::<INT>(
                "
                    fn foo(n) { if n <= 1 { 0 } else { n + foo(n-1) } }
                    foo(6)
                ",
            )
            .unwrap(),
        20
    );

    let max = engine.max_call_levels();

    assert!(matches!(
        *engine
            .run(&format!(
                "
                    fn foo(n) {{ if n == 0 {{ 0 }} else {{ n + foo(n-1) }} }}
                    foo({})
                ",
                max + 1
            ))
            .unwrap_err(),
        EvalAltResult::ErrorStackOverflow(..)
    ));
}

#[test]
fn test_stack_overflow_parsing() {
    let mut engine = Engine::new();

    assert_eq!(
        *engine.compile(
            "1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1**1"
        ).unwrap_err().0,
        ParseErrorType::ExprTooDeep
    );

    assert_eq!(
        *engine.compile(
            "
                let a
            "
        ).unwrap_err().0,
         ParseErrorType::ExprTooDeep
    );

    engine.compile("1 + 2").unwrap();

    #[cfg(debug_assertions)]
    engine
        .compile(
            "
                1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
                1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
                1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
                1
            ",
        )
        .unwrap();

    #[cfg(debug_assertions)]
    assert_eq!(
        *engine
            .compile(
                "
                    1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
                    1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
                    1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
                    1 + 2
                "
            )
            .unwrap_err()
            .err_type(),
        ParseErrorType::ExprTooDeep
    );

    engine.set_max_expr_depths(
        100,
        #[cfg(not(feature = "no_function"))]
        6,
    );

    engine
        .compile(
            "
                1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
                1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
                1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
                1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
                1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 0 + 0 +
                1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
                1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
                1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
                1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
                1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9
            ",
        )
        .unwrap();

    assert_eq!(
        *engine
            .compile(
                "
                    1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
                    1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
                    1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
                    1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
                    1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
                    1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
                    1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
                    1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
                    1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 +
                    1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0
                "
            )
            .unwrap_err()
            .err_type(),
        ParseErrorType::ExprTooDeep
    );

    #[cfg(not(feature = "no_function"))]
    engine.compile("fn abc(x) { x + 1 }").unwrap();
}

#[test]
#[cfg(not(feature = "no_closure"))]
#[cfg(not(feature = "no_function"))]
#[cfg(not(feature = "no_object"))]
fn test_stack_overflow_ref_loop() {
    let engine = Engine::new();

    let x = engine
        .eval::<Dynamic>(
            "
                let x;
                let data = #{ foo: || x = this };
                data.foo();
                x
            ",
        )
        .unwrap();

    println!("{x:?}");
}
